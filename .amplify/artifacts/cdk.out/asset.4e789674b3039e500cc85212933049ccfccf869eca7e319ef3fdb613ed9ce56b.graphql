type Classes {
  className: String
  isDone: Boolean
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelClassesConnection {
  items: [Classes]!
  nextToken: String
}

input ModelClassesFilterInput {
  className: ModelStringInput
  isDone: ModelBooleanInput
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelClassesFilterInput]
  or: [ModelClassesFilterInput]
  not: ModelClassesFilterInput
}

type Query {
  getClasses(id: ID!): Classes
  listClasses(filter: ModelClassesFilterInput, limit: Int, nextToken: String): ModelClassesConnection
}

input ModelClassesConditionInput {
  className: ModelStringInput
  isDone: ModelBooleanInput
  and: [ModelClassesConditionInput]
  or: [ModelClassesConditionInput]
  not: ModelClassesConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateClassesInput {
  className: String
  isDone: Boolean
  id: ID
}

input UpdateClassesInput {
  className: String
  isDone: Boolean
  id: ID!
}

input DeleteClassesInput {
  id: ID!
}

type Mutation {
  createClasses(input: CreateClassesInput!, condition: ModelClassesConditionInput): Classes
  updateClasses(input: UpdateClassesInput!, condition: ModelClassesConditionInput): Classes
  deleteClasses(input: DeleteClassesInput!, condition: ModelClassesConditionInput): Classes
}

input ModelSubscriptionClassesFilterInput {
  className: ModelSubscriptionStringInput
  isDone: ModelSubscriptionBooleanInput
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionClassesFilterInput]
  or: [ModelSubscriptionClassesFilterInput]
}

type Subscription {
  onCreateClasses(filter: ModelSubscriptionClassesFilterInput): Classes @aws_subscribe(mutations: ["createClasses"])
  onUpdateClasses(filter: ModelSubscriptionClassesFilterInput): Classes @aws_subscribe(mutations: ["updateClasses"])
  onDeleteClasses(filter: ModelSubscriptionClassesFilterInput): Classes @aws_subscribe(mutations: ["deleteClasses"])
}
